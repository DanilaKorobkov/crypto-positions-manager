// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/DanilaKorobkov/defi-monitoring/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// Notifier is an autogenerated mock type for the Notifier type
type Notifier struct {
	mock.Mock
}

type Notifier_Expecter struct {
	mock *mock.Mock
}

func (_m *Notifier) EXPECT() *Notifier_Expecter {
	return &Notifier_Expecter{mock: &_m.Mock}
}

// NotifyLiquidityPoolPositions provides a mock function with given fields: ctx, subject, positions
func (_m *Notifier) NotifyLiquidityPoolPositions(ctx context.Context, subject domain.Subject, positions ...domain.LiquidityPoolPosition) error {
	_va := make([]interface{}, len(positions))
	for _i := range positions {
		_va[_i] = positions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, subject)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NotifyLiquidityPoolPositions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Subject, ...domain.LiquidityPoolPosition) error); ok {
		r0 = rf(ctx, subject, positions...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Notifier_NotifyLiquidityPoolPositions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyLiquidityPoolPositions'
type Notifier_NotifyLiquidityPoolPositions_Call struct {
	*mock.Call
}

// NotifyLiquidityPoolPositions is a helper method to define mock.On call
//   - ctx context.Context
//   - subject domain.Subject
//   - positions ...domain.LiquidityPoolPosition
func (_e *Notifier_Expecter) NotifyLiquidityPoolPositions(ctx interface{}, subject interface{}, positions ...interface{}) *Notifier_NotifyLiquidityPoolPositions_Call {
	return &Notifier_NotifyLiquidityPoolPositions_Call{Call: _e.mock.On("NotifyLiquidityPoolPositions",
		append([]interface{}{ctx, subject}, positions...)...)}
}

func (_c *Notifier_NotifyLiquidityPoolPositions_Call) Run(run func(ctx context.Context, subject domain.Subject, positions ...domain.LiquidityPoolPosition)) *Notifier_NotifyLiquidityPoolPositions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]domain.LiquidityPoolPosition, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(domain.LiquidityPoolPosition)
			}
		}
		run(args[0].(context.Context), args[1].(domain.Subject), variadicArgs...)
	})
	return _c
}

func (_c *Notifier_NotifyLiquidityPoolPositions_Call) Return(_a0 error) *Notifier_NotifyLiquidityPoolPositions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Notifier_NotifyLiquidityPoolPositions_Call) RunAndReturn(run func(context.Context, domain.Subject, ...domain.LiquidityPoolPosition) error) *Notifier_NotifyLiquidityPoolPositions_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotifier creates a new instance of Notifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Notifier {
	mock := &Notifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

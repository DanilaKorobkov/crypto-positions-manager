// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/DanilaKorobkov/defi-monitoring/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// LiquidityPoolPositionsProvider is an autogenerated mock type for the LiquidityPoolPositionsProvider type
type LiquidityPoolPositionsProvider struct {
	mock.Mock
}

type LiquidityPoolPositionsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *LiquidityPoolPositionsProvider) EXPECT() *LiquidityPoolPositionsProvider_Expecter {
	return &LiquidityPoolPositionsProvider_Expecter{mock: &_m.Mock}
}

// GetName provides a mock function with no fields
func (_m *LiquidityPoolPositionsProvider) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LiquidityPoolPositionsProvider_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type LiquidityPoolPositionsProvider_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *LiquidityPoolPositionsProvider_Expecter) GetName() *LiquidityPoolPositionsProvider_GetName_Call {
	return &LiquidityPoolPositionsProvider_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *LiquidityPoolPositionsProvider_GetName_Call) Run(run func()) *LiquidityPoolPositionsProvider_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LiquidityPoolPositionsProvider_GetName_Call) Return(_a0 string) *LiquidityPoolPositionsProvider_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LiquidityPoolPositionsProvider_GetName_Call) RunAndReturn(run func() string) *LiquidityPoolPositionsProvider_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPositionsWithLiquidity provides a mock function with given fields: ctx, wallet
func (_m *LiquidityPoolPositionsProvider) GetPositionsWithLiquidity(ctx context.Context, wallet string) ([]domain.LiquidityPoolPosition, error) {
	ret := _m.Called(ctx, wallet)

	if len(ret) == 0 {
		panic("no return value specified for GetPositionsWithLiquidity")
	}

	var r0 []domain.LiquidityPoolPosition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.LiquidityPoolPosition, error)); ok {
		return rf(ctx, wallet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.LiquidityPoolPosition); ok {
		r0 = rf(ctx, wallet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.LiquidityPoolPosition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, wallet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LiquidityPoolPositionsProvider_GetPositionsWithLiquidity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPositionsWithLiquidity'
type LiquidityPoolPositionsProvider_GetPositionsWithLiquidity_Call struct {
	*mock.Call
}

// GetPositionsWithLiquidity is a helper method to define mock.On call
//   - ctx context.Context
//   - wallet string
func (_e *LiquidityPoolPositionsProvider_Expecter) GetPositionsWithLiquidity(ctx interface{}, wallet interface{}) *LiquidityPoolPositionsProvider_GetPositionsWithLiquidity_Call {
	return &LiquidityPoolPositionsProvider_GetPositionsWithLiquidity_Call{Call: _e.mock.On("GetPositionsWithLiquidity", ctx, wallet)}
}

func (_c *LiquidityPoolPositionsProvider_GetPositionsWithLiquidity_Call) Run(run func(ctx context.Context, wallet string)) *LiquidityPoolPositionsProvider_GetPositionsWithLiquidity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LiquidityPoolPositionsProvider_GetPositionsWithLiquidity_Call) Return(_a0 []domain.LiquidityPoolPosition, _a1 error) *LiquidityPoolPositionsProvider_GetPositionsWithLiquidity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LiquidityPoolPositionsProvider_GetPositionsWithLiquidity_Call) RunAndReturn(run func(context.Context, string) ([]domain.LiquidityPoolPosition, error)) *LiquidityPoolPositionsProvider_GetPositionsWithLiquidity_Call {
	_c.Call.Return(run)
	return _c
}

// NewLiquidityPoolPositionsProvider creates a new instance of LiquidityPoolPositionsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLiquidityPoolPositionsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *LiquidityPoolPositionsProvider {
	mock := &LiquidityPoolPositionsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

# Defines the configuration version.
# The only possible value is "2".
version: "2"

issues:
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0
  # Fix found issues (if it's supported by the linter).
  # Default: false
  fix: false

# Options for analysis running.
run:
  # Timeout for total work, e.g. 30s, 5m, 5m30s.
  # If the value is lower or equal to 0, the timeout is disabled.
  # Default: 0 (disabled)
  timeout: 1m
  # The mode used to evaluate relative paths.
  # It's used by exclusions, Go plugins, and some linters.
  # The value can be:
  # - `gomod`: the paths will be relative to the directory of the `go.mod` file.
  # - `gitroot`: the paths will be relative to the git root (the parent directory of `.git`).
  # - `cfg`: the paths will be relative to the configuration file.
  # - `wd` (NOT recommended): the paths will be relative to the place where golangci-lint is run.
  # Default: cfg
  relative-path-mode: gomod
  # Include test files or not.
  # Default: true
  tests: true
  # If set, we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # Default: ""
  modules-download-mode: readonly

severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance
  #
  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Default: ""
  default: error

formatters:
  # Enable specific formatter.
  # Default: [] (uses standard Go formatting)
  enable:
    - gci
    - gofmt
    - gofumpt
    - golines
    - swaggo
  # Formatters settings.
  settings:
    # See the dedicated "formatters.settings" documentation section.
    option: value

    gci:
      # Section configuration to compare against.
      # Section names are case-insensitive and may contain parameters in ().
      # The default order of sections is `standard > default > custom > blank > dot > alias > localmodule`.
      # If `custom-order` is `true`, it follows the order of `sections` option.
      # Default: ["standard", "default"]
      sections:
        - standard # Standard section: captures all standard packages.
        - default # Default section: contains all imports that could not be matched to another section type.
        - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
        - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
        - alias # Alias section: contains all alias imports. This section is not present unless explicitly enabled.
        - localmodule # Local module section: contains all local packages. This section is not present unless explicitly enabled.
      # Checks that no inline comments are present.
      # Default: false
      no-inline-comments: true
      # Checks that no prefix comments (comment lines above an import) are present.
      # Default: false
      no-prefix-comments: true
      # Enable custom order of sections.
      # If `true`, make the section order the same as the order of `sections`.
      # Default: false
      custom-order: true

    # TODO: impove
    gofmt:
      # Apply the rewrite rules to the source before reformatting.
      # https://pkg.go.dev/cmd/gofmt
      # Default: []
      rewrite-rules:
        - pattern: '[]T{T{}, T{}}'
          replacement: '[]T{{}, {}}'
        - pattern: 'interface{}'
          replacement: 'any'
        - pattern: 'a[b:len(a)]'
          replacement: 'a[b:]'

    golines:
      # Target maximum line length.
      # Default: 100
      max-len: 120
      # Length of a tabulation.
      # Default: 4
      tab-len: 4
      # Shorten single-line comments.
      # Default: false
      shorten-comments: true
      # Default: true
      reformat-tags: true
      # Split chained methods on the dots as opposed to the arguments.
      # Default: true
      chain-split-dots: true

linters:
  # Default set of linters.
  # The value can be:
  # - `standard`: https://golangci-lint.run/docs/linters/#enabled-by-default
  # - `all`: enables all linters by default.
  # - `none`: disables all linters by default.
  # - `fast`: enables only linters considered as "fast" (`golangci-lint help linters --json | jq '[ .[] | select(.fast==true) ] | map(.name)'`).
  # Default: standard
  default: all

  # Disable specific linters.
  disable:
    - depguard
    - exhaustruct
    - goheader
    - gomoddirectives
    - gomodguard
    - nlreturn
    - prealloc
    - promlinter
    - protogetter
    - sloglint
    - spancheck
    - decorder
    - godox
    - wsl # Deprecated
    - loggercheck # TODO: Maybe turn on?
    - importas # TODO: Maybe turn on?
    - misspell # TODO: Maybe turn on?

  # All available settings of specific linters.
  settings:
    # See the dedicated "linters.settings" documentation section.
    option: value

    cyclop:
      # The maximal code complexity to report.
      # Default: 10
      max-complexity: 5
      # The maximal average package complexity.
      # If it's higher than 0.0 (float) the check is enabled.
      # Default: 0.0
      package-average: 5

    dogsled:
      # Checks assignments with too many blank identifiers.
      # Default: 2
      max-blank-identifiers: 1

    dupl:
      # Tokens count to trigger issue.
      # Default: 150
      threshold: 100

    embeddedstructfieldcheck:
      # Checks that sync.Mutex and sync.RWMutex are not used as embedded fields.
      # Default: false
      forbid-mutex: true

    errcheck:
      # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
      # Such cases aren't reported by default.
      # Default: false
      check-type-assertions: true
      # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
      # Such cases aren't reported by default.
      # Default: false
      check-blank: true
      # To disable the errcheck built-in exclude list.
      # See `-excludeonly` option in https://github.com/kisielk/errcheck#excluding-functions for details.
      # Default: false
      disable-default-exclusions: true
      # List of functions to exclude from checking, where each entry is a single function to exclude.
      # See https://github.com/kisielk/errcheck#excluding-functions for details.
      exclude-functions:
        - io.Copy(os.Stdout)
      # Display function signature instead of selector.
      # Default: false
      verbose: true

    errchkjson:
      # With check-error-free-encoding set to true, errchkjson does warn about errors
      # from json encoding functions that are safe to be ignored,
      # because they are not possible to happen.
      #
      # if check-error-free-encoding is set to true and errcheck linter is enabled,
      # it is recommended to add the following exceptions to prevent from false positives:
      #
      #     linters:
      #       settings:
      #         errcheck:
      #           exclude-functions:
      #             - encoding/json.Marshal
      #             - encoding/json.MarshalIndent
      #
      # Default: false
      check-error-free-encoding: false
      # Issue on struct encoding that doesn't have exported fields.
      # Default: false
      report-no-exported: true

    errorlint:
      # Check whether fmt.Errorf uses the %w verb for formatting errors.
      # See the https://github.com/polyfloyd/go-errorlint for caveats.
      # Default: true
      errorf: true
      # Permit more than 1 %w verb, valid per Go 1.20 (requires `errorf: true`).
      # Default: true
      errorf-multi: true
      # Check for plain type assertions and type switches.
      # Default: true
      asserts: true
      # Check for plain error comparisons.
      # Default: true
      comparison: true
      # Allowed errors.
      # Default: []
      allowed-errors: []
      # Allowed error "wildcards".
      # Default: []
      allowed-errors-wildcard: []

    exhaustive:
      # Program elements to check for exhaustiveness.
      # Default: [ switch ]
      check:
        - switch
      # Presence of "default" case in switch statements satisfies exhaustiveness,
      # even if all enum members are not listed.
      # Default: false
      default-signifies-exhaustive: true
      # Enum members matching the supplied regex do not have to be listed in
      # switch statements to satisfy exhaustiveness.
      # Default: ""
      ignore-enum-members: ""
      # Enum types matching the supplied regex do not have to be listed in
      # switch statements to satisfy exhaustiveness.
      # Default: ""
      ignore-enum-types: ""
      # Consider enums only in package scopes, not in inner scopes.
      # Default: false
      package-scope-only: false
      # Only run exhaustive check on switches with "//exhaustive:enforce" comment.
      # Default: false
      explicit-exhaustive-switch: false
      # Only run exhaustive check on map literals with "//exhaustive:enforce" comment.
      # Default: false
      explicit-exhaustive-map: false
      # Switch statement requires default case even if exhaustive.
      # Default: false
      default-case-required: false

    fatcontext:
      # Check for potential fat contexts in struct pointers.
      # May generate false positives.
      # Default: false
      check-struct-pointers: true

    forbidigo:
      # Forbid the following identifiers (list of regexp).
      # Default: ["^(fmt\\.Print(|f|ln)|print|println)$"]
      forbid:
        # Built-in bootstrapping functions.
        - pattern: ^print(ln)?$
        # Optional message that gets included in error reports.
        - pattern: ^fmt\.Print.*$
          msg: Do not commit print statements.
        # Alternatively, put messages at the end of the regex, surrounded by `(# )?`.
        # Escape any special characters. Those messages get included in error reports.
        - pattern: 'fmt\.Print.*(# Do not commit print statements\.)?'
      # Exclude godoc examples from forbidigo checks.
      # Default: true
      exclude-godoc-examples: true
      # Instead of matching the literal source code,
      # use type information to replace expressions with strings that contain the package name
      # and (for methods and fields) the type name.
      # This makes it possible to handle import renaming and forbid struct fields and methods.
      # Default: false
      analyze-types: true

    funcorder:
      # Checks that constructors are placed after the structure declaration.
      # Default: true
      constructor: true
      # Checks if the exported methods of a structure are placed before the non-exported ones.
      # Default: true
      struct-method: true
      # Checks if the constructors and/or structure methods are sorted alphabetically.
      # Default: false
      alphabetical: true

    funlen:
      # Checks the number of lines in a function.
      # If lower than 0, disable the check.
      # Default: 60
      lines: 30
      # Checks the number of statements in a function.
      # If lower than 0, disable the check.
      # Default: 40
      statements: 30
      # Ignore comments when counting lines.
      # Default: true
      ignore-comments: true

    gochecksumtype:
      # Presence of `default` case in switch statements satisfies exhaustiveness, if all members are not listed.
      # Default: true
      default-signifies-exhaustive: true
      # Include shared interfaces in the exhaustiveness check.
      # Default: false
      include-shared-interfaces: true

    gocognit:
      # Minimal code complexity to report.
      # Default: 30 (but we recommend 10-20)
      min-complexity: 20

    goconst:
      # Minimal length of string constant.
      # Default: 3
      min-len: 3
      # Minimum occurrences of constant string count to trigger issue.
      # Default: 3
      min-occurrences: 3
      # Look for existing constants matching the values.
      # Default: true
      match-constant: true
      # Search also for duplicated numbers.
      # Default: false
      numbers: true
      # Minimum value, only works with `goconst.numbers`.
      # Default: 3
      min: 3
      # Maximum value, only works with `goconst.numbers`.
      # Default: 3
      max: 3
      # Ignore when constant is not used as function argument.
      # Default: true
      ignore-calls: false
      # Exclude strings matching the given regular expression.
      # Default: ""
      ignore-string-values: ""
      # Detects constants with identical values.
      # Default: false
      find-duplicates: true
      # Evaluates of constant expressions like Prefix + "suffix".
      # Default: false
      eval-const-expressions: true

    gocritic:
      # Disable all checks.
      # Default: false
      disable-all: false
      # Enable all checks.
      # Default: false
      enable-all: true

    gocyclo:
      # Minimal code complexity to report.
      # Default: 30 (but we recommend 10-20)
      min-complexity: 20

    godot:
      # Comments to be checked: `declarations`, `toplevel`, `noinline` or `all`.
      # Default: declarations
      scope: all
      # Check that each sentence starts with a capital letter.
      # Default: false
      capital: true

    iface:
      # List of analyzers.
      # Default: ["identical"]
      enable:
        - identical # Identifies interfaces in the same package that have identical method sets.
        - opaque # Identifies functions that return interfaces, but the actual returned value is always a single concrete implementation.
        - unexported # Identifies interfaces that are not exported but are used in exported functions or methods.

    inamedparam:
      # Skips check for interface methods with only a single parameter.
      # Default: false
      skip-single-param: false

    lll:
      # Max line length, lines longer will be reported.
      # '\t' is counted as 1 character by default, and can be changed with the tab-width option.
      # Default: 120.
      line-length: 120
      # Tab width in spaces.
      # Default: 1
      tab-width: 1

    interfacebloat:
      # The maximum number of methods allowed for an interface.
      # Default: 10
      max: 10

    maintidx:
      # Show functions with maintainability index lower than N.
      # A high index indicates better maintainability (it's kind of the opposite of complexity).
      # Default: 20
      under: 50

    makezero:
      # Allow only slices initialized with a length of zero.
      # Default: false
      always: true

    nestif:
      # Minimal complexity of if statements to report.
      # Default: 5
      min-complexity: 2

    nilnil:
      # To check functions with only two return values (`return nil, nil`).
      # If disabled then returns like `return nil, nil, ..., nil` are supported.
      # Default: true
      only-two: true
      # In addition, detect opposite situation (simultaneous return of non-nil error and valid value).
      # E.g, `return clone, fh.indexer.Update(clone)` will be considered as invalid.
      # Default: false
      detect-opposite: true
      # List of return types to check.
      # Default: ["chan", "func", "iface", "map", "ptr", "uintptr", "unsafeptr"]
      checked-types:
        - chan
        - func
        - iface
        - map
        - ptr
        - uintptr
        - unsafeptr

    nolintlint:
      # Disable to ensure that all nolint directives actually have an effect.
      # Default: false
      allow-unused: false
      # Exclude following linters from requiring an explanation.
      # Default: []
      allow-no-explanation: []
      # Enable to require an explanation of nonzero length after each nolint directive.
      # Default: false
      require-explanation: true
      # Enable to require nolint directives to mention the specific linter being suppressed.
      # Default: false
      require-specific: true

    paralleltest:
      # Ignore missing calls to `t.Parallel()` and only report incorrect uses of it.
      # Default: false
      ignore-missing: false
      # Ignore missing calls to `t.Parallel()` in subtests. Top-level tests are
      # still required to have `t.Parallel`, but subtests are allowed to skip it.
      # Default: false
      ignore-missing-subtests: false

    reassign:
      # Patterns for global variable names that are checked for reassignment.
      # See https://github.com/curioswitch/go-reassign#usage
      # Default: ["EOF", "Err.*"]
      patterns:
        - ".*"

    revive:
      # Sets the default severity.
      # See https://github.com/mgechev/revive#configuration
      # Default: warning
      severity: error
      # Enable all available rules.
      # Default: false
      enable-all-rules: true
      # Enable validation of comment directives.
      # See https://github.com/mgechev/revive#comment-directives
      directives:
        - name: specify-disable-reason
          severity: error
      # Sets the default failure confidence.
      # This means that linting errors with less than 0.8 confidence will be ignored.
      # Default: 0.8
      confidence: 0.0
      # Run `GL_DEBUG=revive golangci-lint run --enable-only=revive` to see default, all available rules, and enabled rules.
      rules:
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#var-naming
        - name: var-naming
          disabled: true
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#package-comments
        - name: package-comments
          disabled: true
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#add-constant
        - name: add-constant
          disabled: false
          arguments:
            - max-lit-count: "1"
              allow-strs: '""'
              allow-ints: "0"
              allow-floats: "0.0"
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#line-length-limit
        - name: line-length-limit
          disabled: false
          arguments: [ 120 ]
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#exported
        - name: exported
          disabled: false
          arguments:
            - "check-private-receivers"
            - "disable-stuttering-check"
            - "say-repetitive-instead-of-stutters"
            - "check-public-interface"
            - "disable-checks-on-constants"
            - "disable-checks-on-functions"
            - "disable-checks-on-methods"
            - "disable-checks-on-types"
            - "disable-checks-on-variables"

    rowserrcheck:
      # database/sql is always checked.
      # Default: []
      packages:
        - github.com/jmoiron/sqlx

    # TODO: improve
    tagliatelle:
      # Checks the struct tag name case.
      case:
        # Defines the association between tag name and case.
        # Any struct tag name can be used.
        # Supported string cases:
        # - `camel`
        # - `pascal`
        # - `kebab`
        # - `snake`
        # - `upperSnake`
        # - `goCamel`
        # - `goPascal`
        # - `goKebab`
        # - `goSnake`
        # - `upper`
        # - `lower`
        # - `header`
        rules:
          json: camel
          yaml: camel
          xml: camel
          toml: camel
          bson: camel
          avro: snake
          mapstructure: kebab
          env: upperSnake
          envconfig: upperSnake
          whatever: snake
        # Defines the association between tag name and case.
        # Important: the `extended-rules` overrides `rules`.
        # Default: empty
        extended-rules:
          json:
            # Supported string cases:
            # - `camel`
            # - `pascal`
            # - `kebab`
            # - `snake`
            # - `upperSnake`
            # - `goCamel`
            # - `goPascal`
            # - `goKebab`
            # - `goSnake`
            # - `header`
            # - `lower`
            # - `header`
            #
            # Required
            case: camel
            # Adds 'AMQP', 'DB', 'GID', 'RTP', 'SIP', 'TS' to initialisms,
            # and removes 'LHS', 'RHS' from initialisms.
            # Default: false
            extra-initialisms: true
            # Defines initialism additions and overrides.
            # Default: empty
            initialism-overrides:
              DB: true # add a new initialism
              LHS: false # disable a default initialism.
              # ...
        # Uses the struct field name to check the name of the struct tag.
        # Default: false
        use-field-name: true
        # The field names to ignore.
        # Default: []
        ignored-fields:
          - Bar
          - Foo
        # Overrides the default/root configuration.
        # Default: []
        overrides:
          - # The package path (uses `/` only as a separator).
            # Required
            pkg: foo/bar
            # Default: empty or the same as the default/root configuration.
            rules:
              json: snake
              xml: pascal
            # Default: empty or the same as the default/root configuration.
            extended-rules:
            # Same options as the base `extended-rules`.
            # Default: false (WARNING: it doesn't follow the default/root configuration)
            use-field-name: true
            # The field names to ignore.
            # Default: [] or the same as the default/root configuration.
            ignored-fields:
              - Bar
              - Foo
            # Ignore the package (takes precedence over all other configurations).
            # Default: false
            ignore: true

    testifylint:
      # Enable all checkers (https://github.com/Antonboom/testifylint#checkers).
      # Default: false
      enable-all: true

    testpackage:
      # Regexp pattern to skip files.
      # Default: "(export|internal)_test\\.go"
      skip-regexp: (export|internal)_test\.go
      # List of packages that don't end with _test that tests are allowed to be in.
      # Default: "main"
      allow-packages:
        - main

    wsl_v5:
      # Allow cuddling a variable if it's used first in the immediate following block,
      # even if the statement with the block doesn't use the variable.
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#configuration
      # Default: true
      allow-first-in-block: true
      # Same as above,
      # but allows cuddling if the variable is used anywhere in the following (or nested) block.
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#configuration
      # Default: false
      allow-whole-block: false
      # If a block contains more than this number of lines,
      # the branch statement needs to be separated by whitespace.
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#configuration
      # Default: 2
      branch-max-lines: 5
      # If set to a non-negative number,
      # case blocks need to end with whitespace if exceeding this number
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#configuration
      # Default: 0
      case-max-lines: 0
      # Default checks to use.
      # Can be `all`, `none`, `default` or empty.
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#checks-and-configuration
      # Default: ""
      default: default
      # Enabled checks.
      # Will be additive to any presets.
      # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#checks-and-configuration
      # Default: all

    # TODO: next - unconvert



version: '3'

vars:
  PROJECT_NAME:
    sh: head -n 1 go.mod | awk -F ' ' '{print $2}' | awk -F '/' '{print $NF}'
  GIT_SHA:
    sh: git rev-parse --short HEAD
  GIT_BRANCH:
    sh: git rev-parse --abbrev-ref HEAD
  BRANCH_SLUG:
    sh: echo "{{.GIT_BRANCH}}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | cut -c 1-30

tasks:

  project-name:
    silent: true
    desc: Get project name
    cmds:
      - echo "{{.PROJECT_NAME}}"

  image-tag:
    silent: true
    desc: Get Docker image tag
    cmds:
      - |
        if [ "{{.GIT_BRANCH}}" = "main" ]; then
          echo "main-{{.GIT_SHA}}"
        else
          echo "{{.BRANCH_SLUG}}-{{.GIT_SHA}}"
        fi

  format:
    desc: Lint the source code
    cmds:
      - docker run --rm -v $(pwd):/app -w /app golangci/golangci-lint:v2.4.0 golangci-lint fmt
      - docker run --rm -v $(pwd):/app -w /app golangci/golangci-lint:v2.4.0 golangci-lint run --fix

  lint:
    desc: All linters
    deps: [lint-golang, lint-actions]

  lint-golang:
    desc: Lint the source code
    cmds:
      - docker run --rm -v $(pwd):/app -w /app golangci/golangci-lint:v2.4.0 golangci-lint run

  lint-actions:
    desc: Lint the github actions
    cmds:
      - go run github.com/rhysd/actionlint/cmd/actionlint@latest

  mocks:
    desc: Generate mocks
    cmds:
    - rm -rf ./mocks
    - go run github.com/vektra/mockery/v2@v2.53.4

  tests:
    desc: Run tests
    cmds:
      - go test -race ./...

  build:
    desc: Build docker image with service
    cmds:
      - docker build .
        --file build/Dockerfile
        --tag {{.PROJECT_NAME}}:local
        --pull

  create-migration:
    desc: Create new migration
    cmds:
      - go run {{.GO_MIGRATE}} create -ext sql -dir migrations/sql -seq {{.CLI_ARGS}}
    vars:
      GO_MIGRATE_VERSION: v4.18.3
      GO_MIGRATE: github.com/golang-migrate/migrate/v4/cmd/migrate@{{.GO_MIGRATE_VERSION}}
    preconditions:
      - sh: "test {{len .CLI_ARGS}} -gt 0"
        msg: "Missing migration name. Пример: `task create-migration -- create_table_users`"

  deploy/prod/prepare:
    desc: Prepare server for deploy
    cmds:
      - ansible-playbook deploy/ansible/playbooks/prepare.yaml -u root --ask-pass

  deploy/prod:
    desc: Deploy to prod
    dotenv: [ 'deploy/.env.default', 'deploy/.env', 'deploy/.env' ]
    cmds:
      - ansible-playbook deploy/ansible/playbooks/deploy-service.yaml

  service/debug:
    desc: Deploy to local environment
    deps: [ build ]
    cmds:
      - docker-compose 
        --profile infra
        --file deploy/docker-compose.yaml
        --env-file deploy/.env.default
        --env-file deploy/.env.local
        up

  service/run:
    desc: Deploy to local environment
    deps: [ build ]
    cmds:
      - docker-compose
        --profile all
        --file deploy/docker-compose.yaml
        --env-file deploy/.env.default
        --env-file deploy/.env
        --env-file deploy/.env.local
        up

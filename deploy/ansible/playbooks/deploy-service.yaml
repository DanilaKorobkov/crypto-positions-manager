---
- name: Deploy Service
  hosts: all
  remote_user: "{{ deploy_user }}"
  become: yes

  tasks:
    - name: Copy docker-compose.yaml
      copy:
        src: "{{ playbook_dir }}/../../docker-compose.yaml"
        dest: "{{ app_dir }}/docker-compose.yaml"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0644'

    - name: Write .env file
      copy:
        dest: "{{ app_dir }}/.env"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0600'
        content: |
          IMAGE_NAME="{{ lookup('env','IMAGE_NAME') }}"
          POSTGRES_HOST="{{ lookup('env','POSTGRES_HOST') }}"
          POSTGRES_USER="{{ lookup('env','POSTGRES_USER') }}"
          POSTGRES_PASSWORD="{{ lookup('env','POSTGRES_PASSWORD') }}"
          POSTGRES_DB="{{ lookup('env','POSTGRES_DB') }}"
          POSTGRES_PORT="{{ lookup('env','POSTGRES_PORT') }}"
          THE_GRAPH_TOKEN="{{ lookup('env','THE_GRAPH_TOKEN') }}"
          TELEGRAM_BOT_TOKEN="{{ lookup('env','TELEGRAM_BOT_TOKEN') }}"
          SUBJECT_WALLET="{{ lookup('env','SUBJECT_WALLET') }}"
          SUBJECT_TELEGRAM_USER_ID="{{ lookup('env','SUBJECT_TELEGRAM_USER_ID') }}"
          ERROR_RECEIVER_TELEGRAM_USER_ID="{{ lookup('env','ERROR_RECEIVER_TELEGRAM_USER_ID') }}"
          CHECK_INTERVAL="{{ lookup('env','CHECK_INTERVAL') }}"

    - name: Deploy containers using Docker Compose plugin
      shell: |
        docker compose pull
        docker compose --profile all --env-file .env up -d --force-recreate
      args:
        chdir: "{{ app_dir }}"
      become: yes
      become_user: "{{ deploy_user }}"
services:
  defi-monitoring-watcher:
    profiles: ["all"]
    image: ${IMAGE_NAME}
    container_name: defi-monitoring-watcher
    restart: always
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      THE_GRAPH_TOKEN: ${THE_GRAPH_TOKEN}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      SUBJECT_WALLET: ${SUBJECT_WALLET}
      SUBJECT_TELEGRAM_USER_ID: ${SUBJECT_TELEGRAM_USER_ID}
      ERROR_RECEIVER_TELEGRAM_USER_ID: ${ERROR_RECEIVER_TELEGRAM_USER_ID}
      CHECK_INTERVAL: ${CHECK_INTERVAL}
    networks:
      - defi-monitoring-network

  defi-monitoring-db-migrations:
    profiles: ["all", "infra"]
    image: ${IMAGE_NAME}
    environment:
      POSTGRES_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable"
    command: "/app/cli db migrations"
    depends_on:
      defi-monitoring-db:
        condition: service_healthy
    networks:
      - defi-monitoring-network

  defi-monitoring-db:
    profiles: ["all", "infra"]
    image: postgres:17.6-alpine
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      start_period: 5s
      interval: 2s
      timeout: 5s
      retries: 5
    networks:
      - defi-monitoring-network

volumes:
  postgres_data:
    name: defi-monitoring-db-volume
    driver: local

networks:
  defi-monitoring-network:
    driver: bridge
